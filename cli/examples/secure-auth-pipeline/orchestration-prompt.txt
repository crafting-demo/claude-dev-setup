You need to implement a secure JWT-based authentication system for this repository. This example demonstrates sequential subagent orchestration where each agent builds upon the previous agent's work.

**FEATURE DEFINITION:**
Create a comprehensive JWT authentication system with secure token generation, validation, refresh mechanisms, and proper security hardening. The system should include both server-side APIs and client-side integration with thorough security documentation.

**TECHNICAL REQUIREMENTS:**
- **Backend Authentication**: JWT token generation, validation middleware, refresh token handling
- **Security Hardening**: Proper token storage, expiration handling, rate limiting, input validation
- **Client Integration**: Login/logout functionality, token storage, authenticated requests
- **Security Documentation**: Best practices, security considerations, developer guidelines

**SEQUENTIAL ORCHESTRATION WORKFLOW:**

## Phase 1: Software Implementation
**Agent: software_engineer**
Start by calling the software_engineer agent to implement the core authentication functionality:

```
Task: Implement secure JWT authentication system with the following components:
1. JWT token generation and validation utilities
2. Authentication middleware for route protection  
3. Login/logout API endpoints with proper error handling
4. Token refresh mechanism to handle expiration
5. Client-side login form and authentication state management
6. Secure token storage patterns (httpOnly cookies recommended)
7. Basic input validation and sanitization

Focus on clean, maintainable code following best practices. Include error handling and logging. Create realistic user data and demonstrate the full authentication flow.
```

## Phase 2: Security Analysis & Hardening
**Agent: security_analyst**
After the software engineer completes the implementation, call the security_analyst to review and enhance security:

```
Task: Conduct comprehensive security review of the JWT authentication implementation and apply security hardening:

SECURITY REVIEW AREAS:
1. Token Security: Validate JWT signing algorithms, secret management, token structure
2. Session Management: Review token expiration, refresh token security, logout handling
3. Input Validation: Check for injection vulnerabilities, parameter tampering
4. Rate Limiting: Implement login attempt limiting, brute force protection
5. OWASP Compliance: Verify against OWASP Top 10 authentication vulnerabilities
6. Transport Security: Ensure HTTPS requirements, secure headers
7. Storage Security: Validate client-side token storage methods

REQUIRED SECURITY ENHANCEMENTS:
- Add rate limiting to login endpoints
- Implement proper CORS configuration
- Add security headers (CSP, HSTS, etc.)
- Validate JWT algorithms and signing methods
- Add input sanitization and validation layers
- Implement secure logout (token blacklisting if needed)
- Add password complexity requirements if applicable
- Review and fix any identified vulnerabilities

Provide detailed security analysis report and implement all recommended fixes.
```

## Phase 3: Security Documentation
**Agent: documentation_writer**
Finally, call the documentation_writer to create comprehensive security-focused documentation:

```
Task: Create comprehensive security documentation for the JWT authentication system:

DOCUMENTATION REQUIREMENTS:
1. Security Architecture Overview: How the authentication system works securely
2. Implementation Guide: Step-by-step setup and configuration
3. Security Best Practices: Guidelines for developers using this system
4. Threat Model: Potential security risks and mitigations implemented
5. API Documentation: Secure usage patterns for all endpoints
6. Client Integration Guide: How to safely implement client-side authentication
7. Security Configuration: Environment variables, security settings, deployment considerations
8. Troubleshooting: Common security issues and solutions

Include the security analyst's findings and explain how each security measure protects against specific threats. Make it accessible to developers while maintaining technical accuracy.

Update README.md and create additional security documentation files as needed.
```

**ITERATIVE REFINEMENT:**
After each agent completes their work, review the output and provide specific feedback for improvements. This demonstrates the persistent session capabilities:

1. **Review Software Implementation**: Check code quality, completeness, best practices
2. **Validate Security Enhancements**: Ensure all vulnerabilities are addressed
3. **Refine Documentation**: Make sure it's comprehensive and developer-friendly

Use multiple rounds of feedback to each agent to achieve a polished, production-ready result.

**COMPLETION REQUIREMENTS:**
After all agents have completed their work and iterative improvements:

1. **Final Security Validation** - Verify that:
   - JWT implementation follows security best practices
   - All OWASP authentication guidelines are met
   - Rate limiting and security headers are properly configured
   - Documentation covers all security aspects thoroughly
   - Client-side integration is secure and well-documented

2. **Create a new branch** - Use git commands to create a feature branch:
   ```bash
   git checkout -b secure-auth-jwt-$(date +%s)
   ```

3. **Commit your changes** - Stage and commit all work:
   ```bash
   git add .
   git commit -m "feat: implement secure JWT authentication with security hardening and documentation"
   ```

4. **Create Pull Request with Automatic Push** - Use `gh` to handle both pushing and PR creation:
   ```bash
   gh pr create --title "‚úÖ feat: secure JWT authentication system with comprehensive security hardening" --body "
   # Secure JWT Authentication System

   ## Overview
   Implemented a production-ready JWT authentication system with comprehensive security hardening and documentation.

   ## Multi-Agent Sequential Implementation
   This feature demonstrates sophisticated sequential subagent orchestration:
   
   ### üõ†Ô∏è Phase 1: Software Engineer
   - Core JWT authentication implementation
   - Login/logout API endpoints and middleware
   - Client-side authentication integration
   - Token refresh and session management

   ### üîí Phase 2: Security Analyst
   - Comprehensive security review and vulnerability assessment
   - OWASP compliance validation and fixes
   - Rate limiting and brute force protection
   - Security headers and transport security
   - Input validation and sanitization enhancements

   ### üìñ Phase 3: Documentation Writer
   - Security architecture documentation
   - Developer implementation guides
   - Threat model and security best practices
   - API documentation with security considerations

   ## Security Features Implemented
   - JWT token generation with secure algorithms
   - HTTP-only cookie storage for tokens
   - Rate limiting on authentication endpoints
   - Comprehensive input validation and sanitization
   - Security headers (CSP, HSTS, X-Frame-Options, etc.)
   - Secure logout with token invalidation
   - CORS configuration for API security

   ## Testing Instructions
   1. Start the application server
   2. Navigate to the login page
   3. Test authentication flow with valid credentials
   4. Verify security headers in browser dev tools
   5. Test rate limiting by attempting multiple failed logins
   6. Verify secure token storage and refresh mechanisms

   ## Files Modified
   [Generated by the sequential agent workflow]

   ## Security Validation
   ‚úÖ OWASP Top 10 compliance verified
   ‚úÖ JWT security best practices implemented
   ‚úÖ Rate limiting and brute force protection active
   ‚úÖ Secure token storage patterns used
   ‚úÖ Comprehensive security documentation provided
   " --base main
   ```

**IMPORTANT**: The PR title MUST start with the ‚úÖ emoji as the first character.

This workflow showcases how sequential subagent orchestration enables sophisticated collaboration where each agent builds upon and enhances the previous agent's work, resulting in a secure, well-documented, production-ready authentication system.

Begin the sequential implementation process by calling the software_engineer agent first.